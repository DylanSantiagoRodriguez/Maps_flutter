-- Esquema de Supabase para recordatorios con ubicaciones (OpenStreetMap)
-- Permite recordatorios de una sola vez y repetidos

-- Tipo ENUM para la repetición
create type if not exists public.reminder_repeat_type as enum (
  'none',       -- sin repetición (una sola vez)
  'daily',      -- diario
  'weekly',     -- semanal (usar days_of_week)
  'monthly',    -- mensual (usar monthly_day)
  'yearly'      -- anual
);

-- Tabla de ubicaciones guardadas por el usuario
create table if not exists public.locations (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  name text not null,
  description text,
  latitude double precision not null check (latitude between -90 and 90),
  longitude double precision not null check (longitude between -180 and 180),
  osm_id bigint,                                        -- ID de OSM (opcional)
  osm_type text check (osm_type in ('node','way','relation')), -- tipo OSM (opcional)
  radius_meters integer not null default 100 check (radius_meters between 10 and 5000), -- radio para geocerca
  address text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create index if not exists locations_user_id_idx on public.locations(user_id);
create index if not exists locations_coords_idx on public.locations(latitude, longitude);

-- Tabla de recordatorios
create table if not exists public.reminders (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  location_id bigint not null references public.locations(id) on delete cascade,
  title text not null,
  notes text,

  -- Programación para una sola vez
  scheduled_at timestamptz,

  -- Programación para repetición
  repeat_type public.reminder_repeat_type not null default 'none',
  start_date date,                       -- inicio de la repetición
  end_date date,                         -- fin opcional de la repetición
  time_of_day time,                      -- hora del día para las repeticiones
  days_of_week smallint[],               -- 0=Dom,1=Lun,...6=Sáb (para semanal)
  monthly_day smallint,                  -- 1..31 (para mensual)

  active boolean not null default true,  -- habilitado/deshabilitado
  completed boolean not null default false, -- marcado como completado (para una sola vez)

  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),

  -- Reglas básicas de consistencia
  check (
    -- si es una sola vez, debe tener fecha programada
    (repeat_type = 'none' and scheduled_at is not null)
    or
    -- si es repetido, al menos debe tener start_date y time_of_day
    (repeat_type <> 'none' and start_date is not null and time_of_day is not null)
  ),
  check (monthly_day is null or (monthly_day between 1 and 31))
);

create index if not exists reminders_user_id_idx on public.reminders(user_id);
create index if not exists reminders_location_id_idx on public.reminders(location_id);
create index if not exists reminders_repeat_type_idx on public.reminders(repeat_type);
create index if not exists reminders_scheduled_at_idx on public.reminders(scheduled_at);

-- Trigger para updated_at
create or replace function public.set_updated_at() returns trigger language plpgsql as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

create trigger locations_set_updated_at
before update on public.locations
for each row execute procedure public.set_updated_at();

create trigger reminders_set_updated_at
before update on public.reminders
for each row execute procedure public.set_updated_at();

-- Seguridad por filas (RLS)
alter table public.locations enable row level security;
alter table public.reminders enable row level security;

-- Policies para locations
create policy if not exists "locations_select_own" on public.locations
  for select using (auth.uid() = user_id);
create policy if not exists "locations_insert_own" on public.locations
  for insert with check (auth.uid() = user_id);
create policy if not exists "locations_update_own" on public.locations
  for update using (auth.uid() = user_id);
create policy if not exists "locations_delete_own" on public.locations
  for delete using (auth.uid() = user_id);

-- Policies para reminders
create policy if not exists "reminders_select_own" on public.reminders
  for select using (auth.uid() = user_id);
create policy if not exists "reminders_insert_own" on public.reminders
  for insert with check (auth.uid() = user_id);
create policy if not exists "reminders_update_own" on public.reminders
  for update using (auth.uid() = user_id);
create policy if not exists "reminders_delete_own" on public.reminders
  for delete using (auth.uid() = user_id);